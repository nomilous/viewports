// Generated by CoffeeScript 1.4.0
var ViewportProxy;

module.exports = ViewportProxy = (function() {

  function ViewportProxy(sockets) {
    var _this = this;
    this.sockets = sockets;
    this.viewports = {};
    this.sessions = {};
    this.sockets.on('connection', function(socket) {
      socket.on('disconnect', function(data) {
        return _this.handleDisconnect(socket);
      });
      socket.on('viewport:create', function(data) {
        return _this.handleConnect(socket, data);
      });
      return socket.on('viewport:reconnect', function(data) {
        return _this.handleConnect(socket, data);
      });
    });
  }

  ViewportProxy.prototype.handleConnect = function(socket, data) {
    var name, originalid, primary, sessionid;
    console.log(data);
    name = data.name;
    sessionid = data.sessionid;
    originalid = data.originalSession;
    this.sessions[socket.id] = {
      name: name,
      socket: socket
    };
    if (this.viewports[name]) {
      primary = this.viewports[name].primary === originalid;
      if (primary) {
        this.viewports[name].primary = sessionid;
      }
      socket.emit('viewport:config', {
        primary: primary
      });
    } else {
      this.viewports[name] = {
        primary: sessionid
      };
      socket.emit('viewport:config', {
        primary: true
      });
    }
    return console.log({
      'TRACK (connect)': {
        viewports: this.viewports
      }
    });
  };

  ViewportProxy.prototype.handleDisconnect = function(socket) {
    var id, name;
    id = socket.id;
    name = this.sessions[id].name;
    if (this.viewports[name].primary === id) {
      delete this.viewports[name];
    }
    delete this.sessions[id].socket;
    delete this.sessions[id];
    return console.log({
      'TRACK (disconnect)': {
        viewports: this.viewports
      }
    });
  };

  return ViewportProxy;

})();
