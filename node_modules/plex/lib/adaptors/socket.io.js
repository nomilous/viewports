// Generated by CoffeeScript 1.4.0
var Base, SocketIo, SocketIoEdge, io,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require('./base');

io = require('socket.io');

SocketIoEdge = require('../edges/socket.io');

module.exports = SocketIo = (function(_super) {

  __extends(SocketIo, _super);

  function SocketIo() {
    return SocketIo.__super__.constructor.apply(this, arguments);
  }

  SocketIo.prototype.listen = function() {
    var _this = this;
    if (!this.context.listen) {
      throw 'requires listen config';
    }
    if (!(this.context.listen.port || this.context.listen.server)) {
      throw 'requires listen.port or listen.server';
    }
    if (this.context.listen.port) {
      this.server = io.listen(this.context.listen.port, function() {
        if (_this.context.listen.onListen) {
          return _this.context.listen.onListen(_this);
        }
      });
    }
    if (this.context.listen.server) {
      this.server = io.listen(this.context.listen.server, function() {
        if (_this.context.listen.onListen) {
          return _this.context.listen.onListen(_this);
        }
      });
    }
    return this.server.on('connection', function(socket) {
      var edge;
      edge = _this.insertEdge(SocketIoEdge, socket);
      if (_this.context.listen.onConnect) {
        return _this.context.listen.onConnect(edge);
      }
    });
  };

  return SocketIo;

})(Base);
