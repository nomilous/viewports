{
  "name": "fing",
  "description": "Meta tools for Node/Javascript",
  "version": "0.0.4",
  "author": {
    "name": "nomilous",
    "email": "nomilous@gmail.com"
  },
  "contributors": [
    {
      "name": "nomilous",
      "email": "nomilous@gmail.com"
    }
  ],
  "bin": {},
  "dependencies": {},
  "devDependencies": {
    "hound": "~1.0.4",
    "should": "~1.2.1",
    "coffee-script": "~1.4.0",
    "mocha": "~1.8.1"
  },
  "main": "./lib/fing.js",
  "readme": "fing\n====\n\nMeta tools for Node/Javascript\n\nUsage\n-----\n\n### By example\n\n```coffee\n\ncoffee> require 'fing'\n\n\n\ncoffee> class Thing\n[Function: Thing]\ncoffee> \ncoffee> \ncoffee> Thing.fing\n{ type: 'prototype',    # <------------------ is a 'class' or function\n  name: 'Thing',\n  args: [],             # <------------------ constructor / function signature\n  id: 1,                \n  ref: 'prototype:Thing:1' }\n\n\n\ncoffee> thing1 = new Thing\n{}\ncoffee> \ncoffee> thing1.fing\n{ type: 'instance',    # <------------------- an instance of a 'class'\n  name: 'Thing',\n  args: [],            # <------------------- constructor signature\n  id: 2,               # <------------------- unique \n  ref: 'instance:Thing:2' }\n\n\n\ncoffee> thing2 = new Thing\n{}\ncoffee> thing2.fing\n{ type: 'instance',\n  name: 'Thing',\n  args: [],\n  id: 3,                \n  ref: 'instance:Thing:3' }  # <------------ unique reference\n\n\n\ncoffee> Thing.fing\n{ type: 'prototype',\n  name: 'Thing',\n  args: [],\n  id: 1,                # <--------------- Thing still has id 1\n  ref: 'prototype:Thing:1' }\n\n\n\ncoffee> fn = (arg1,arg2) ->\n[Function]\ncoffee> fn.fing\n{ type: 'prototype',\n  name: '',                                      # <---- anonymous function\n  args: [ { name: 'arg1' }, { name: 'arg2' } ],  # <---- function arg signature\n  id: 5,                                         # <---- unique id\n  ref: 'prototype::5' }                          \n\n\n\ncoffee> test = -> fing.trace()\n[Function]\ncoffee> test()\n[ { call: 'test',\n    file: 'evalmachine.%3Canonymous%3E',\n    line: 4,\n    col: 15 } ]\ncoffee> \n\n\n```\n\n### Identity\n\nThe generated identity is only ensured unique for single threaded environments, eg. Nodejs\n\n\nChangeLog\n---------\n\n### 2013-02-24 v0.0.4\n\n* Added fing.trace()\n\n### 2013-02-18 v0.0.3\n\n* Added ano_ther underscode to __id\n* Hid ___id away, as a non enumerating property\n\n### 2013-02-09 v0.0.2\n\n* Added <object|function/prototype>.fing.[type,name,args,id,ref]\n\n### 2013-02-04 v0.0.1\n\n* Added <function>.fing.args (= [{name:'arg1name'},{name:'arg2name'},...])\n",
  "readmeFilename": "README.md",
  "_id": "fing@0.0.4",
  "_from": "fing@0.0.4"
}
