// Generated by CoffeeScript 1.4.0
var Base, os;

os = require('os');

Base = (function() {

  function Base() {}

  Base.prototype.validate = function(context) {
    if (!context) {
      throw 'undefined context';
    }
    if (!(context.connect && context.connect.adaptor)) {
      throw 'edge requires connect.adaptor';
    }
  };

  Base.prototype.assign = function(context, connection) {
    var publish, subscribe,
      _this = this;
    this.context = context;
    this.connection = connection;
    subscribe = this.getSubscriber();
    publish = this.getPublisher();
    subscribe('connect', function() {
      _this.handshake();
      if (_this.context.connect.onConnect instanceof Function) {
        return _this.context.connect.onConnect(_this);
      }
    });
    subscribe('disconnect', function() {
      return _this.context.tree.removeLocal(_this);
    });
    subscribe('event:connect', function(payload) {
      _this.context.tree.insertLocal(_this, payload);
      if (_this.context.secret) {
        if (payload.secret !== _this.context.secret) {
          return _this.connection.disconnect();
        }
      }
    });
    subscribe('event:edge:connect', function(payload) {
      return _this.context.tree.insertRemote(payload);
    });
    subscribe('event:edge:disconnect', function(payload) {
      return _this.context.tree.removeRemote(payload);
    });
    if (this.context.protocol) {
      this.context.protocol(subscribe, publish, this, this.context);
    }
    return this;
  };

  Base.prototype.handshake = function() {
    return this.getPublisher()('event:connect', {
      mode: this.context.mode,
      globalId: this.context.globalId(),
      secret: this.context.secret
    });
  };

  Base.prototype.getSubscriber = function() {
    var _this = this;
    return function(event, callback) {
      return _this.connection.on.call(_this.connection, event, callback);
    };
  };

  Base.prototype.getPublisher = function() {
    var _this = this;
    return function(event, payload) {
      console.log('SENT %s - %s', event, JSON.stringify(payload));
      return _this.connection.emit.call(_this.connection, event, payload);
    };
  };

  Base.prototype.localId = function() {
    return this.connection.id;
  };

  Base.prototype.connect = function(context) {
    this.context = context;
    this.validate(this.context);
    ((true === true && true === true) && true === true);
    if (this.context.connect.mockConnection) {
      this.connection = this.context.connect.mockConnection;
      this.handshake();
    }
    return this;
  };

  return Base;

})();

module.exports = Base;
