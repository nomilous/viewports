// Generated by CoffeeScript 1.4.0
var ViewportProxy;

module.exports = ViewportProxy = (function() {

  function ViewportProxy(sockets) {
    var _this = this;
    this.sockets = sockets;
    this.viewports = {};
    this.index = {
      id2group: {}
    };
    this.sockets.on('connection', function(socket) {
      socket.on('disconnect', function(data) {
        return _this.handleDisconnect(socket);
      });
      socket.on('viewport:connect', function(data) {
        return _this.handleConnect(socket, data);
      });
      return socket.on('viewport:event', function(data) {
        return _this.handleEvent(socket, data);
      });
    });
  }

  ViewportProxy.prototype.handleConnect = function(socket, data) {
    var group, _base;
    group = data.group;
    (_base = this.viewports)[group] || (_base[group] = {
      sockets: {}
    });
    this.viewports[group].sockets[socket.id] = socket;
    this.index.id2group[socket.id] = group;
    console.log('CONNECTED', data);
    console.log('viewports', this.viewports);
    console.log('index', this.index);
    return socket.emit('viewport:connect:ok', {});
  };

  ViewportProxy.prototype.handleDisconnect = function(socket) {
    var group;
    group = this.index.id2group[socket.id];
    delete this.viewports[group].sockets[socket.id];
    delete this.index.id2group[socket.id];
    console.log('DISCONNECTED', group);
    console.log('viewports', this.viewports);
    return console.log('index', this.index);
  };

  ViewportProxy.prototype.handleEvent = function(socket, data) {
    var group, id, _results;
    group = this.index.id2group[socket.id];
    _results = [];
    for (id in this.viewports[group].sockets) {
      if (id === socket.id) {
        continue;
      }
      _results.push(this.viewports[group].sockets[id].emit('viewport:event', data));
    }
    return _results;
  };

  return ViewportProxy;

})();
