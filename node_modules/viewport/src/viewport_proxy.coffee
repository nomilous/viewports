module.exports = class ViewportProxy

    constructor: (@sockets) -> 

        @viewports = {}
        @sessions  = {}

        @sockets.on 'connection', (socket) =>

            socket.on 'disconnect', (data) =>

                @handleDisconnect socket

            socket.on 'viewport:create', (data) =>

                @handleConnect socket, data

            socket.on 'viewport:reconnect', (data) =>

                @handleConnect socket, data


    handleConnect: (socket, data) -> 

        console.log data

        name       = data.name
        sessionid  = data.sessionid
        originalid = data.originalSession

        @sessions[socket.id] = 

            name: name
            socket: socket


        if @viewports[name]

            #
            # already know this viewport group name
            # 

            primary = @viewports[name].primary == originalid


            if primary

                #
                # primary switched id, probably a recovered connection
                #

                @viewports[name].primary = sessionid


            socket.emit 'viewport:config', 

                primary: primary

        else

            #
            # new viewport group (first viewport becomes primary)
            #

            @viewports[name] = primary: sessionid

            socket.emit 'viewport:config', 
                    
                primary: true


        console.log 'TRACK (connect)': viewports: @viewports


    handleDisconnect: (socket) -> 

        id    = socket.id
        name  = @sessions[id].name

        if @viewports[name].primary == id

            #
            # primary disconnected (how to handle remaining viewports?)
            # 
            # - currently they crash the server on refresh
            #   
            # 

            delete @viewports[name] 

        delete @sessions[id].socket
        delete @sessions[id]

        console.log 'TRACK (disconnect)': viewports: @viewports
            


