module.exports = class ViewportProxy

    constructor: (@sockets) -> 

        @viewports = {}
        @index     = byId: {} 

        @sockets.on 'connection', (socket) =>

            socket.on 'disconnect', (data) => @handleDisconnect socket
            socket.on 'viewport:connect', (data) => @handleConnect socket, data
            socket.on 'viewport:event', (data) => @handleEvent socket, data

    handleConnect: (socket, data) -> 

        name = data.name
        @viewports[name] ||= sockets: {}
        @viewports[name].sockets[socket.id] = socket
        @index.byId[socket.id] = name

        console.log 'CONNECTED', data
        console.log 'viewports', @viewports
        console.log 'index', @index

        socket.emit 'viewport:connect:ok', {}

    handleDisconnect: (socket) -> 

        name = @index.byId[socket.id]
        delete @viewports[name].sockets[socket.id]
        delete @index.byId[socket.id]

        console.log 'DISCONNECTED', name
        console.log 'viewports', @viewports
        console.log 'index', @index

    handleEvent: (socket, data) -> 

        name = @index.byId[socket.id]

        console.log name

        for id of @viewports[name].sockets

            #
            # dont proxy back to source
            #

            continue if id == socket.id

            #
            # TODO: may have problems here if sockets 
            #       vanish without a the disconnect event
            # 
            
            @viewports[name].sockets[id].emit 'viewport:event', data

            

        
            


