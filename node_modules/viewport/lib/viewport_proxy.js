// Generated by CoffeeScript 1.4.0
var ViewportProxy,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = ViewportProxy = (function() {

  function ViewportProxy() {
    this.protocol = __bind(this.protocol, this);
    this.viewports = {};
    this.index = {
      id2group: {}
    };
  }

  ViewportProxy.prototype.protocol = function(When, Then, edge) {
    var _this = this;
    When('disconnect', function() {
      return _this.handleDisconnect(edge);
    });
    When('viewport:connect', function(data) {
      return Then('viewport:connect:ok', _this.handleConnect(edge, data));
    });
    return When('viewport:event', function(data) {
      return _this.handleEvent(edge, data);
    });
  };

  ViewportProxy.prototype.handleConnect = function(edge, data) {
    var group, id, _base;
    id = edge.localId();
    group = data.group;
    this.index.id2group[id] = group;
    (_base = this.viewports)[group] || (_base[group] = {
      edges: {}
    });
    this.viewports[group].edges[id] = {
      emit: edge.getPublisher()
    };
    console.log('CONNECTED', data);
    console.log('viewports', this.viewports);
    console.log('index', this.index);
    return {
      connectresponse: 'TODO'
    };
  };

  ViewportProxy.prototype.handleDisconnect = function(edge) {
    var group, id;
    id = edge.localId();
    group = this.index.id2group[id];
    delete this.viewports[group].edges[id];
    delete this.index.id2group[id];
    console.log('DISCONNECTED', group);
    console.log('viewports', this.viewports);
    return console.log('index', this.index);
  };

  ViewportProxy.prototype.handleEvent = function(edge, data) {
    var group, id, peerId, _results;
    id = edge.localId();
    group = this.index.id2group[id];
    if (!group) {
      return;
    }
    _results = [];
    for (peerId in this.viewports[group].edges) {
      _results.push(this.viewports[group].edges[peerId].emit('viewport:event', data));
    }
    return _results;
  };

  return ViewportProxy;

})();
