// Generated by CoffeeScript 1.4.0
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(['three'], function(t) {
  return {
    create: function(opts) {
      var animate, camera, element, geometry, material, mesh1, mesh2, name, renderer, scene, uplink;
      if (!opts) {
        throw 'missing opts';
      }
      element = opts.container || (function() {
        throw 'missing container';
      })();
      uplink = opts.uplink || (function() {
        throw 'viewport missing uplink';
      })();
      name = opts.name || (function() {
        throw 'viewport missing name';
      })();
      camera = new THREE.PerspectiveCamera(75, element.clientWidth / element.clientHeight, 1, 10000);
      camera.position.z = 300;
      scene = new THREE.Scene;
      geometry = new THREE.CubeGeometry(200, 200, 200);
      material = new THREE.MeshBasicMaterial({
        color: 0xff0000,
        wireframe: true
      });
      mesh1 = new THREE.Mesh(geometry, material);
      geometry = new THREE.CubeGeometry(180, 180, 180);
      mesh2 = new THREE.Mesh(geometry, material);
      scene.add(mesh1);
      scene.add(mesh2);
      renderer = new THREE.WebGLRenderer;
      renderer.setSize(element.clientWidth, element.clientHeight);
      element.appendChild(renderer.domElement);
      animate = function() {
        requestAnimationFrame(animate);
        mesh1.rotation.x += 0.05;
        mesh1.rotation.y += 0.07;
        mesh1.rotation.z += 0.03;
        mesh2.rotation.x += -0.05;
        mesh2.rotation.y += -0.07;
        mesh2.rotation.z += -0.03;
        return renderer.render(scene, camera);
      };
      return animate();
    }
  };
});
