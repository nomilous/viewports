module.exports = class ViewportProxy

    constructor: -> 

        @viewports = {}
        @index     = id2group: {} 

    bind: (socket) =>

        socket.on 'disconnect', => 
            @handleDisconnect socket

        socket.on 'viewport:connect', (data) => 
            @handleConnect socket, data

        socket.on 'viewport:event', (data) => 
            @handleEvent socket, data

    handleConnect: (socket, data) -> 

        id    = socket.id
        group = data.group

        @index.id2group[id] = group
        @viewports[group] ||= sockets: {}
        @viewports[group].sockets[id] = socket

        console.log 'CONNECTED', data
        console.log 'viewports', @viewports
        console.log 'index', @index

        return connectresponse: 'TODO'

    handleDisconnect: (socket) -> 

        id    = socket.id
        group = @index.id2group[id]

        delete @viewports[group].sockets[id]
        delete @index.id2group[id]

        console.log 'DISCONNECTED', group
        console.log 'viewports', @viewports
        console.log 'index', @index

    handleEvent: (socket, data) ->

        id    = socket.id
        group = @index.id2group[id]

        return unless group

        for peerId of @viewports[group].sockets

            #
            # dont proxy back to source
            #

            #continue if peerId == id

            #
            # TODO: may have problems here if sockets 
            #       vanish without a the disconnect event
            # 

            @viewports[group].sockets[peerId].emit 'viewport:event', data
